// Code generated by go-bindata.
// sources:
// dbo/schema.sql
// DO NOT EDIT!

package dbo

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x92\x4f\x8f\x9b\x30\x10\xc5\xef\x7c\x8a\x77\xdc\x48\xcd\x27\xd8\x93\x13\x26\xad\x55\x02\x91\x71\x76\x43\x2f\xc8\x0b\x93\x16\x75\x03\x91\x71\xa8\xf6\xdb\x57\xc6\x21\xfb\xaf\xdd\x2a\xf5\x05\xb0\xde\xfb\xcd\x30\xf3\x96\x8a\x84\x26\x68\xb1\x48\x08\x72\x85\x34\xd3\xa0\x9d\xcc\x75\x0e\x67\x4d\xe5\x3a\x5b\xf2\xc0\xad\xeb\x71\x13\x01\x32\xc6\xf3\x59\xc8\xcf\x39\x29\x29\x12\xbc\x39\x9e\x91\x6e\x93\x04\x1b\x25\xd7\x42\x15\xf8\x4a\xc5\xa7\x08\x58\x25\xd9\xfd\x45\xa4\x69\xa7\xdf\x1a\x5f\xb9\xbd\x83\xee\x28\xd5\xe5\xb9\xaa\x77\x5c\x2e\xff\x03\x93\x6b\xb1\xde\x00\x5a\xae\x29\xbc\xde\x4b\xfd\x65\xfc\xc4\xb7\x2c\x25\x2f\xcc\xb3\xad\x5a\xd2\x0b\xb4\xbf\xdc\x88\x22\xc9\xc4\xf9\xcf\x17\x85\x26\xf1\xaf\x7a\x61\xa8\x71\x29\x7c\x6b\x7f\xab\xf7\x3c\xa6\x98\x56\x62\x9b\x68\x54\x27\x6b\xb9\x75\xa5\x6b\x0e\xdc\x3b\x73\x38\x8e\x43\x53\xd9\xba\xcc\x49\xdd\xc9\x25\x85\x96\x30\x9f\xa3\xb3\xcd\xf7\xa6\x35\x8f\x38\xda\x6e\x68\x6a\xb6\xe8\xf6\x18\x17\x15\x01\x89\xc8\xf5\x7b\xcb\xa3\xe9\x1d\x7a\xb6\x43\x53\x31\xdc\x0f\xe3\xbc\xb7\xe2\xbe\xe7\x3a\x38\x71\x73\x30\x4f\x0f\x8c\xba\xd9\xef\xd9\x37\x02\xb3\x77\x6c\x61\xd9\xd9\xa7\xd9\xc4\x25\xa5\x32\x35\x4d\xe7\xc2\x65\x6b\x3b\x3b\x49\x14\x69\x55\x00\x90\x69\x50\x1c\x2d\x0f\x4d\x77\xea\xf1\xb3\xed\x7e\xb5\x81\x87\xf6\x74\x78\x60\x6f\x99\xd4\xe3\x91\xe3\x66\xe7\xf3\x69\x16\xaf\xc5\xb3\xdb\x28\x3a\x07\x56\xa6\x31\xed\x3e\x0c\x6c\x78\x94\x4d\x1d\x01\x59\xfa\x2e\xcd\x53\xb4\x66\xb7\x57\x23\xc7\xdd\x7c\x44\x0d\xeb\x8e\x29\x5f\x5e\x45\xaf\x2c\x1b\xc7\x75\x69\xdc\x9f\xe1\x2f\x62\x15\xd8\xbf\x03\x00\x00\xff\xff\xfd\x86\x62\x07\xbd\x03\x00\x00")

func schemaSqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaSql,
		"schema.sql",
	)
}

func schemaSql() (*asset, error) {
	bytes, err := schemaSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.sql", size: 957, mode: os.FileMode(420), modTime: time.Unix(1514975452, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.sql": schemaSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"schema.sql": &bintree{schemaSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

