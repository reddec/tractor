// Code generated by go-bindata.
// sources:
// dbo/schema.sql
// DO NOT EDIT!

package dbo

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x92\xc1\x4e\xbc\x30\x10\xc6\xef\x7d\x8a\x39\xfe\x49\xfe\x6f\xc0\x69\xd8\xce\xca\x28\x14\xd2\x0e\x0a\x5e\x1a\xe2\x72\x30\x31\x9a\xb0\xd5\xe7\x37\xd5\x75\x97\xae\xc6\xc5\xb9\x41\xfb\xfb\xbe\x99\xce\xb7\xb1\x84\x42\x20\x58\x54\x04\xbc\x05\xd3\x08\x50\xcf\x4e\x1c\x84\x79\x7c\x08\x2f\xb3\x9f\xa7\xfd\xeb\x53\x80\x7f\x0a\x80\x35\x24\x55\xf0\x95\x23\xcb\x58\xc1\x59\x45\x19\xd3\x55\x15\xb4\x96\x6b\xb4\x03\xdc\xd0\xf0\x5f\x01\xd0\x2d\x19\x59\xdc\x13\xea\xe5\x9c\x4d\x04\x8e\x90\x3f\x79\xaf\x82\x5a\xb4\x91\x3a\xb2\x11\x8a\xff\x9d\xa0\x15\xd2\x1e\x0f\x12\xc2\x35\x39\xc1\xba\x85\x3b\x96\xf2\xe3\x13\xee\x1b\x43\x89\x18\x9b\xb6\x5b\x5a\x16\x83\x10\x5e\xea\x60\xcb\x86\x5d\x79\xb2\x5a\xe5\xd4\x74\x92\x58\xad\x72\xfa\x84\xd2\x59\x2f\x3e\xd0\xb5\x6b\x8c\x2f\x09\x35\x59\xb7\x7e\x15\xd6\x26\x67\x11\x52\x59\xae\xd4\x21\x47\x6c\x34\xf5\xbf\xe6\xc8\x4f\x6f\xd3\x73\xf0\x8f\xbb\xd8\xb7\xf9\x16\xb2\xaf\x19\xb2\xfc\x0f\x92\xfb\x30\xce\x61\xda\xf9\x31\xfc\x2c\xba\xd8\xb9\x26\xb7\xc9\xf2\xf7\x00\x00\x00\xff\xff\xd4\x15\xf7\x43\xf6\x02\x00\x00")

func schemaSqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaSql,
		"schema.sql",
	)
}

func schemaSql() (*asset, error) {
	bytes, err := schemaSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.sql", size: 758, mode: os.FileMode(420), modTime: time.Unix(1514980831, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.sql": schemaSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"schema.sql": &bintree{schemaSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

