// Code generated by go-bindata.
// sources:
// dbo/schema.sql
// DO NOT EDIT!

package dbo

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x92\xcf\x4e\xb3\x40\x14\xc5\xf7\x3c\xc5\x5d\x7e\x4d\xbe\x37\xe8\x6a\xe8\xdc\xca\x55\x98\x21\x33\x17\x0b\x6e\x26\x44\x30\x31\x69\x4a\x42\x47\x7d\x7d\x33\xa6\x5a\x40\xa2\xe0\xec\xf8\xf3\xfb\x1d\x38\x39\x3b\x83\x82\x11\x58\xc4\x29\x02\xed\x41\x69\x06\x2c\xc9\xb2\x05\xdf\xd7\x8f\xbe\xeb\x5d\xdf\x9e\x5f\x8e\x1e\xfe\x45\x00\x24\x61\x74\x62\xba\xb1\x68\x48\xa4\x30\x39\x41\xa3\x8a\x34\x85\xdc\x50\x26\x4c\x05\x77\x58\xfd\x8f\x00\x6e\xad\x56\x2e\x41\x21\xd1\xd8\xf0\x1e\x63\xc9\x53\x76\x24\x08\xd0\x3e\xd5\x87\xe1\xb3\x45\x10\xde\xa3\xe2\x3f\x41\xee\xfa\x97\x8b\xa0\x5c\x98\x40\x7d\xb1\x01\x0a\xf7\x2d\x0b\xc3\x28\x9d\xb8\x28\x98\x32\xb4\x2c\xb2\x1c\x0e\xc4\xc9\xc7\x25\x3c\x68\x85\x23\x19\xa9\xbc\x18\x46\xc6\x15\xa3\xf8\xb5\x20\x52\x64\x93\x6b\xd4\xa2\x24\x5d\xf0\x28\x6a\x51\x92\xd2\x12\x61\x75\xab\xc6\xc0\x14\x8a\x36\xdb\x28\xba\x8c\x8f\x94\xc4\xf2\xc7\xf1\xb9\xf6\xb5\x3d\x79\xf7\xdc\x84\xef\x56\xdf\x96\xf9\x59\xfd\x66\xbb\x42\xf9\x74\xec\xde\xe6\x75\x61\x6f\xab\x54\xa7\xae\x69\xe7\x55\xa1\xaf\x55\xaa\xb3\xaf\x7b\xdf\x36\xae\xf6\xf3\xc2\xc1\xa8\x24\xda\xdd\x66\xfb\x1e\x00\x00\xff\xff\x9f\x84\xba\x12\xc1\x03\x00\x00")

func schemaSqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaSql,
		"schema.sql",
	)
}

func schemaSql() (*asset, error) {
	bytes, err := schemaSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.sql", size: 961, mode: os.FileMode(420), modTime: time.Unix(1515044735, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.sql": schemaSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"schema.sql": &bintree{schemaSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

